name: Draft release pull request

on:
    pull_request:
        types: [closed]

jobs:
    generate-changelog:
        name: Create a PR to update version and release notes
        if: github.event.pull_request.merged == true && github.event.pull_request.base_ref == 'main'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@main
              with:
                  fetch-depth: 0 # Needed to get all tags for changelog generation
            - name: Set up Python 3.12
              uses: actions/setup-python@v4
              with:
                  python-version: 3.12
                  cache: pip
            - name: Install build tool
              run: python -m pip install hatch
            - name: Determine Version Bump from PR Labels
              id: version
              run: |
                  BUMP="patch"
                  LABELS='${{ toJSON(github.event.pull_request.labels.*.name) }}'
                  echo "Checking labels: $LABELS"
                  if echo "$LABELS" | grep -q "semver:major"; then
                    BUMP="major"
                  elif echo "$LABELS" | grep -q "semver:minor"; then
                    BUMP="minor"
                  elif echo "$LABELS" | grep -q "semver:alpha"; then
                    BUMP="alpha"
                  elif echo "$LABELS" | grep -q "semver:beta"; then
                    BUMP="beta"
                  elif echo "$LABELS" | grep -q "semver:preview"; then
                    BUMP="preview"
                  elif echo "$LABELS" | grep -q "semver:dev"; then
                    BUMP="dev"
                  fi
                  echo "Version bump determined: $BUMP"
                  echo "level=${BUMP}" >> $GITHUB_OUTPUT
            - name: Bump version
              run: hatch version ${{ steps.version.outputs.level }}
            - name: Generate release notes
              if: contains(['major', 'minor', 'patch', 'beta'], steps.version.outputs.level)
              id: changelog
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  PREVIOUS_VERSION=$(gh release view --json tagName --jq .tagName)
                  NEXT_VERSION="v$(hatch version)"
                  echo "## $NEXT_VERSION ($(date -I))" > changelog.md
                  gh api \
                    --method POST \
                    -H "Accept: application/vnd.github.v3+json" \
                    /repos/SFDO-Tooling/CumulusCI/releases/generate-notes \
                    -f previous_tag_name=$PREVIOUS_VERSION \
                    -f target_commitish='main' \
                    -f tag_name=$NEXT_VERSION \
                    --jq '.body' |
                    sed -e 's_\(https.*\/\)\([0-9]*\)$_[#\2](\1\2)_' \
                        -e 's_by @\(.*\) in_by [@\1](https://github.com/\1) in_' >> changelog.md
                  python utility/update-history.py
            - name: Lint history
              if: contains(['major', 'minor', 'patch', 'beta'], steps.version.outputs.level)
              run: |
                  npm install prettier
                  npx prettier --write docs/history.md
            - name: Commit changes
              if: contains(['major', 'minor', 'patch', 'beta'], steps.version.outputs.level)
              run: |
                  git config user.name github-actions[bot]
                  git config user.email 41898282+github-actions[bot]@users.noreply.github.com
                  git switch -c "release-$(hatch version)"
                  git add docs/history.md cumulusci/__about__.py
                  git commit -m "Update changelog (automated)"
                  git push origin "release-$(hatch version)"
            - name: Commit changes and open PR
              if: contains(['major', 'minor', 'patch', 'beta'], steps.version.outputs.level)
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  gh pr create --title "Release v$(hatch version)" --fill --label 'auto-pr'
